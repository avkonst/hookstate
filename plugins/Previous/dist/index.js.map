{"version":3,"file":"index.js","sources":["../src/Previous.ts"],"sourcesContent":["import { Plugin, PluginCallbacks, State, self, PluginCallbacksOnSetArgument } from '@hookstate/core';\n\nconst PluginID = Symbol('Previous');\n\ntype PreviousInstanceType<T = unknown> = () => (PluginCallbacks & {\n    get(): T | undefined\n  } & {\n  previous: T | undefined\n})\n\nconst PreviousInstance: PreviousInstanceType = () => ({\n  previous: undefined,\n  onSet(data: PluginCallbacksOnSetArgument) {\n    this.previous = data.previous\n  },\n  get() {\n    return this.previous\n  }\n})\n\n/**\n * A plugin which allows to remember previous state.\n * It can be used by other extensions, like development tools or\n * plugins persisting a state.\n */\nexport function Previous(): Plugin;\n/**\n * A plugin which allows to remember previous state.\n * It can be used by other extensions, like development tools or\n * plugins persisting a state.\n */\nexport function Previous<S>(state: State<S>): S | void;\nexport function Previous<S>(state?: State<S>): Plugin | S | void {\n  if (state === undefined) {\n    return {\n      id: PluginID,\n      init: () => PreviousInstance()\n    }\n  }\n  const [instance] = state[self].attach(PluginID)\n  const inst = instance as ReturnType<PreviousInstanceType<S>>\n  return inst.get()\n}\n"],"names":["self"],"mappings":";;;;;;AAEA,IAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAQpC,IAAM,gBAAgB,GAAyB,cAAM,QAAC;IACpD,QAAQ,EAAE,SAAS;IACnB,KAAK,EAAL,UAAM,IAAkC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;KAC9B;IACD,GAAG;QACD,OAAO,IAAI,CAAC,QAAQ,CAAA;KACrB;CACF,IAAC,CAAA;SAcc,QAAQ,CAAI,KAAgB;IAC1C,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO;YACL,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,cAAM,OAAA,gBAAgB,EAAE,GAAA;SAC/B,CAAA;KACF;IACM,IAAA,QAAQ,GAAI,KAAK,CAACA,SAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAhC,CAAgC;IAC/C,IAAM,IAAI,GAAG,QAA+C,CAAA;IAC5D,OAAO,IAAI,CAAC,GAAG,EAAE,CAAA;AACnB;;;;"}